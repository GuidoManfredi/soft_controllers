"""autogenerated by genmsg_py from SoftMoveBaseActionGoal.msg. Do not edit."""
import roslib.message
import struct

import soft_move_base.msg
import roslib.rostime
import actionlib_msgs.msg
import pr2_soft_controller.msg
import std_msgs.msg

class SoftMoveBaseActionGoal(roslib.message.Message):
  _md5sum = "59208ee2e3dc4e794d85f7b90e9d2097"
  _type = "soft_move_base/SoftMoveBaseActionGoal"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
SoftMoveBaseGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: soft_move_base/SoftMoveBaseGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
pr2_soft_controller/SM_TRAJ_STR_ROS traj

================================================================================
MSG: pr2_soft_controller/SM_TRAJ_STR_ROS
int32 trajId
int32 nbAxis
float64 timePreserved
float64[] qStart
float64[] qGoal
float64[] jmax
float64[] amax
float64[] vmax
SM_TRAJ_AXIS_STR_ROS[] traj

================================================================================
MSG: pr2_soft_controller/SM_TRAJ_AXIS_STR_ROS
int32 nbSeg
int32 unsused
SM_SEGMENT_STR_ROS[] seg


================================================================================
MSG: pr2_soft_controller/SM_SEGMENT_STR_ROS
int32 lpId
int32 unused
float64 timeOnTraj
float64 time
float64 ic_a
float64 ic_v
float64 ic_x
float64 jerk


"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['Header','actionlib_msgs/GoalID','soft_move_base/SoftMoveBaseGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,goal_id,goal
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SoftMoveBaseActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = soft_move_base.msg.SoftMoveBaseGoal()
    else:
      self.header = std_msgs.msg._Header.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = soft_move_base.msg.SoftMoveBaseGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2id.pack(_x.goal.traj.trajId, _x.goal.traj.nbAxis, _x.goal.traj.timePreserved))
      length = len(self.goal.traj.qStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.traj.qStart))
      length = len(self.goal.traj.qGoal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.traj.qGoal))
      length = len(self.goal.traj.jmax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.traj.jmax))
      length = len(self.goal.traj.amax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.traj.amax))
      length = len(self.goal.traj.vmax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.traj.vmax))
      length = len(self.goal.traj.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.traj.traj:
        _x = val1
        buff.write(_struct_2i.pack(_x.nbSeg, _x.unsused))
        length = len(val1.seg)
        buff.write(_struct_I.pack(length))
        for val2 in val1.seg:
          _x = val2
          buff.write(_struct_2i6d.pack(_x.lpId, _x.unused, _x.timeOnTraj, _x.time, _x.ic_a, _x.ic_v, _x.ic_x, _x.jerk))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = soft_move_base.msg.SoftMoveBaseGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.goal.traj.trajId, _x.goal.traj.nbAxis, _x.goal.traj.timePreserved,) = _struct_2id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.qStart = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.qGoal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.jmax = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.amax = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.vmax = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.traj.traj = []
      for i in range(0, length):
        val1 = pr2_soft_controller.msg.SM_TRAJ_AXIS_STR_ROS()
        _x = val1
        start = end
        end += 8
        (_x.nbSeg, _x.unsused,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.seg = []
        for i in range(0, length):
          val2 = pr2_soft_controller.msg.SM_SEGMENT_STR_ROS()
          _x = val2
          start = end
          end += 56
          (_x.lpId, _x.unused, _x.timeOnTraj, _x.time, _x.ic_a, _x.ic_v, _x.ic_x, _x.jerk,) = _struct_2i6d.unpack(str[start:end])
          val1.seg.append(val2)
        self.goal.traj.traj.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2id.pack(_x.goal.traj.trajId, _x.goal.traj.nbAxis, _x.goal.traj.timePreserved))
      length = len(self.goal.traj.qStart)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.traj.qStart.tostring())
      length = len(self.goal.traj.qGoal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.traj.qGoal.tostring())
      length = len(self.goal.traj.jmax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.traj.jmax.tostring())
      length = len(self.goal.traj.amax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.traj.amax.tostring())
      length = len(self.goal.traj.vmax)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.traj.vmax.tostring())
      length = len(self.goal.traj.traj)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.traj.traj:
        _x = val1
        buff.write(_struct_2i.pack(_x.nbSeg, _x.unsused))
        length = len(val1.seg)
        buff.write(_struct_I.pack(length))
        for val2 in val1.seg:
          _x = val2
          buff.write(_struct_2i6d.pack(_x.lpId, _x.unused, _x.timeOnTraj, _x.time, _x.ic_a, _x.ic_v, _x.ic_x, _x.jerk))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = soft_move_base.msg.SoftMoveBaseGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.goal.traj.trajId, _x.goal.traj.nbAxis, _x.goal.traj.timePreserved,) = _struct_2id.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.qStart = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.qGoal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.jmax = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.amax = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.traj.vmax = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.traj.traj = []
      for i in range(0, length):
        val1 = pr2_soft_controller.msg.SM_TRAJ_AXIS_STR_ROS()
        _x = val1
        start = end
        end += 8
        (_x.nbSeg, _x.unsused,) = _struct_2i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.seg = []
        for i in range(0, length):
          val2 = pr2_soft_controller.msg.SM_SEGMENT_STR_ROS()
          _x = val2
          start = end
          end += 56
          (_x.lpId, _x.unused, _x.timeOnTraj, _x.time, _x.ic_a, _x.ic_v, _x.ic_x, _x.jerk,) = _struct_2i6d.unpack(str[start:end])
          val1.seg.append(val2)
        self.goal.traj.traj.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2i6d = struct.Struct("<2i6d")
_struct_3I = struct.Struct("<3I")
_struct_2id = struct.Struct("<2id")
_struct_2I = struct.Struct("<2I")
_struct_2i = struct.Struct("<2i")
