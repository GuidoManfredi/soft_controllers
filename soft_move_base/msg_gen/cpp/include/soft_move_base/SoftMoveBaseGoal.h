/* Auto-generated by genmsg_cpp for file /u/gmanfred/ros/release/soft_controllers/soft_move_base/msg/SoftMoveBaseGoal.msg */
#ifndef SOFT_MOVE_BASE_MESSAGE_SOFTMOVEBASEGOAL_H
#define SOFT_MOVE_BASE_MESSAGE_SOFTMOVEBASEGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr2_soft_controller/SM_TRAJ_STR_ROS.h"

namespace soft_move_base
{
template <class ContainerAllocator>
struct SoftMoveBaseGoal_ {
  typedef SoftMoveBaseGoal_<ContainerAllocator> Type;

  SoftMoveBaseGoal_()
  : traj()
  {
  }

  SoftMoveBaseGoal_(const ContainerAllocator& _alloc)
  : traj(_alloc)
  {
  }

  typedef  ::pr2_soft_controller::SM_TRAJ_STR_ROS_<ContainerAllocator>  _traj_type;
   ::pr2_soft_controller::SM_TRAJ_STR_ROS_<ContainerAllocator>  traj;


private:
  static const char* __s_getDataType_() { return "soft_move_base/SoftMoveBaseGoal"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d5522a248bbf08e0a75f1902c082cf61"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
pr2_soft_controller/SM_TRAJ_STR_ROS traj\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_TRAJ_STR_ROS\n\
int32 trajId\n\
int32 nbAxis\n\
float64 timePreserved\n\
float64[] qStart\n\
float64[] qGoal\n\
float64[] jmax\n\
float64[] amax\n\
float64[] vmax\n\
SM_TRAJ_AXIS_STR_ROS[] traj\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_TRAJ_AXIS_STR_ROS\n\
int32 nbSeg\n\
int32 unsused\n\
SM_SEGMENT_STR_ROS[] seg\n\
\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_SEGMENT_STR_ROS\n\
int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, traj);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, traj);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(traj);
    return size;
  }

  typedef boost::shared_ptr< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SoftMoveBaseGoal
typedef  ::soft_move_base::SoftMoveBaseGoal_<std::allocator<void> > SoftMoveBaseGoal;

typedef boost::shared_ptr< ::soft_move_base::SoftMoveBaseGoal> SoftMoveBaseGoalPtr;
typedef boost::shared_ptr< ::soft_move_base::SoftMoveBaseGoal const> SoftMoveBaseGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace soft_move_base

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5522a248bbf08e0a75f1902c082cf61";
  }

  static const char* value(const  ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5522a248bbf08e0ULL;
  static const uint64_t static_value2 = 0xa75f1902c082cf61ULL;
};

template<class ContainerAllocator>
struct DataType< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "soft_move_base/SoftMoveBaseGoal";
  }

  static const char* value(const  ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
pr2_soft_controller/SM_TRAJ_STR_ROS traj\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_TRAJ_STR_ROS\n\
int32 trajId\n\
int32 nbAxis\n\
float64 timePreserved\n\
float64[] qStart\n\
float64[] qGoal\n\
float64[] jmax\n\
float64[] amax\n\
float64[] vmax\n\
SM_TRAJ_AXIS_STR_ROS[] traj\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_TRAJ_AXIS_STR_ROS\n\
int32 nbSeg\n\
int32 unsused\n\
SM_SEGMENT_STR_ROS[] seg\n\
\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_SEGMENT_STR_ROS\n\
int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
";
  }

  static const char* value(const  ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.traj);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SoftMoveBaseGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::soft_move_base::SoftMoveBaseGoal_<ContainerAllocator> & v) 
  {
    s << indent << "traj: ";
s << std::endl;
    Printer< ::pr2_soft_controller::SM_TRAJ_STR_ROS_<ContainerAllocator> >::stream(s, indent + "  ", v.traj);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SOFT_MOVE_BASE_MESSAGE_SOFTMOVEBASEGOAL_H

