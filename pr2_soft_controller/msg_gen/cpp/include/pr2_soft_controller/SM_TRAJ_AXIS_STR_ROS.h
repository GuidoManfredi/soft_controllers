/* Auto-generated by genmsg_cpp for file /u/gmanfred/ros/release/soft_controllers/pr2_soft_controller/msg/SM_TRAJ_AXIS_STR_ROS.msg */
#ifndef PR2_SOFT_CONTROLLER_MESSAGE_SM_TRAJ_AXIS_STR_ROS_H
#define PR2_SOFT_CONTROLLER_MESSAGE_SM_TRAJ_AXIS_STR_ROS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr2_soft_controller/SM_SEGMENT_STR_ROS.h"

namespace pr2_soft_controller
{
template <class ContainerAllocator>
struct SM_TRAJ_AXIS_STR_ROS_ {
  typedef SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> Type;

  SM_TRAJ_AXIS_STR_ROS_()
  : nbSeg(0)
  , unsused(0)
  , seg()
  {
  }

  SM_TRAJ_AXIS_STR_ROS_(const ContainerAllocator& _alloc)
  : nbSeg(0)
  , unsused(0)
  , seg(_alloc)
  {
  }

  typedef int32_t _nbSeg_type;
  int32_t nbSeg;

  typedef int32_t _unsused_type;
  int32_t unsused;

  typedef std::vector< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::other >  _seg_type;
  std::vector< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::other >  seg;


  ROS_DEPRECATED uint32_t get_seg_size() const { return (uint32_t)seg.size(); }
  ROS_DEPRECATED void set_seg_size(uint32_t size) { seg.resize((size_t)size); }
  ROS_DEPRECATED void get_seg_vec(std::vector< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::other > & vec) const { vec = this->seg; }
  ROS_DEPRECATED void set_seg_vec(const std::vector< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::other > & vec) { this->seg = vec; }
private:
  static const char* __s_getDataType_() { return "pr2_soft_controller/SM_TRAJ_AXIS_STR_ROS"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "46d28de6583e6d91193c1deecfbc745d"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 nbSeg\n\
int32 unsused\n\
SM_SEGMENT_STR_ROS[] seg\n\
\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_SEGMENT_STR_ROS\n\
int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, nbSeg);
    ros::serialization::serialize(stream, unsused);
    ros::serialization::serialize(stream, seg);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, nbSeg);
    ros::serialization::deserialize(stream, unsused);
    ros::serialization::deserialize(stream, seg);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(nbSeg);
    size += ros::serialization::serializationLength(unsused);
    size += ros::serialization::serializationLength(seg);
    return size;
  }

  typedef boost::shared_ptr< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SM_TRAJ_AXIS_STR_ROS
typedef  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<std::allocator<void> > SM_TRAJ_AXIS_STR_ROS;

typedef boost::shared_ptr< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS> SM_TRAJ_AXIS_STR_ROSPtr;
typedef boost::shared_ptr< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS const> SM_TRAJ_AXIS_STR_ROSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_soft_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46d28de6583e6d91193c1deecfbc745d";
  }

  static const char* value(const  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x46d28de6583e6d91ULL;
  static const uint64_t static_value2 = 0x193c1deecfbc745dULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_soft_controller/SM_TRAJ_AXIS_STR_ROS";
  }

  static const char* value(const  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 nbSeg\n\
int32 unsused\n\
SM_SEGMENT_STR_ROS[] seg\n\
\n\
\n\
================================================================================\n\
MSG: pr2_soft_controller/SM_SEGMENT_STR_ROS\n\
int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nbSeg);
    stream.next(m.unsused);
    stream.next(m.seg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SM_TRAJ_AXIS_STR_ROS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_soft_controller::SM_TRAJ_AXIS_STR_ROS_<ContainerAllocator> & v) 
  {
    s << indent << "nbSeg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nbSeg);
    s << indent << "unsused: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unsused);
    s << indent << "seg[]" << std::endl;
    for (size_t i = 0; i < v.seg.size(); ++i)
    {
      s << indent << "  seg[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::stream(s, indent + "    ", v.seg[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_SOFT_CONTROLLER_MESSAGE_SM_TRAJ_AXIS_STR_ROS_H

