/* Auto-generated by genmsg_cpp for file /u/gmanfred/ros/release/soft_controllers/pr2_soft_controller/msg/SM_SEGMENT_STR_ROS.msg */
#ifndef PR2_SOFT_CONTROLLER_MESSAGE_SM_SEGMENT_STR_ROS_H
#define PR2_SOFT_CONTROLLER_MESSAGE_SM_SEGMENT_STR_ROS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr2_soft_controller
{
template <class ContainerAllocator>
struct SM_SEGMENT_STR_ROS_ {
  typedef SM_SEGMENT_STR_ROS_<ContainerAllocator> Type;

  SM_SEGMENT_STR_ROS_()
  : lpId(0)
  , unused(0)
  , timeOnTraj(0.0)
  , time(0.0)
  , ic_a(0.0)
  , ic_v(0.0)
  , ic_x(0.0)
  , jerk(0.0)
  {
  }

  SM_SEGMENT_STR_ROS_(const ContainerAllocator& _alloc)
  : lpId(0)
  , unused(0)
  , timeOnTraj(0.0)
  , time(0.0)
  , ic_a(0.0)
  , ic_v(0.0)
  , ic_x(0.0)
  , jerk(0.0)
  {
  }

  typedef int32_t _lpId_type;
  int32_t lpId;

  typedef int32_t _unused_type;
  int32_t unused;

  typedef double _timeOnTraj_type;
  double timeOnTraj;

  typedef double _time_type;
  double time;

  typedef double _ic_a_type;
  double ic_a;

  typedef double _ic_v_type;
  double ic_v;

  typedef double _ic_x_type;
  double ic_x;

  typedef double _jerk_type;
  double jerk;


private:
  static const char* __s_getDataType_() { return "pr2_soft_controller/SM_SEGMENT_STR_ROS"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1177219c152dc7e2bdf63b0d409cf1a3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, lpId);
    ros::serialization::serialize(stream, unused);
    ros::serialization::serialize(stream, timeOnTraj);
    ros::serialization::serialize(stream, time);
    ros::serialization::serialize(stream, ic_a);
    ros::serialization::serialize(stream, ic_v);
    ros::serialization::serialize(stream, ic_x);
    ros::serialization::serialize(stream, jerk);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, lpId);
    ros::serialization::deserialize(stream, unused);
    ros::serialization::deserialize(stream, timeOnTraj);
    ros::serialization::deserialize(stream, time);
    ros::serialization::deserialize(stream, ic_a);
    ros::serialization::deserialize(stream, ic_v);
    ros::serialization::deserialize(stream, ic_x);
    ros::serialization::deserialize(stream, jerk);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(lpId);
    size += ros::serialization::serializationLength(unused);
    size += ros::serialization::serializationLength(timeOnTraj);
    size += ros::serialization::serializationLength(time);
    size += ros::serialization::serializationLength(ic_a);
    size += ros::serialization::serializationLength(ic_v);
    size += ros::serialization::serializationLength(ic_x);
    size += ros::serialization::serializationLength(jerk);
    return size;
  }

  typedef boost::shared_ptr< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SM_SEGMENT_STR_ROS
typedef  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<std::allocator<void> > SM_SEGMENT_STR_ROS;

typedef boost::shared_ptr< ::pr2_soft_controller::SM_SEGMENT_STR_ROS> SM_SEGMENT_STR_ROSPtr;
typedef boost::shared_ptr< ::pr2_soft_controller::SM_SEGMENT_STR_ROS const> SM_SEGMENT_STR_ROSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_soft_controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1177219c152dc7e2bdf63b0d409cf1a3";
  }

  static const char* value(const  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1177219c152dc7e2ULL;
  static const uint64_t static_value2 = 0xbdf63b0d409cf1a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_soft_controller/SM_SEGMENT_STR_ROS";
  }

  static const char* value(const  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 lpId\n\
int32 unused\n\
float64 timeOnTraj\n\
float64 time\n\
float64 ic_a\n\
float64 ic_v\n\
float64 ic_x\n\
float64 jerk\n\
\n\
\n\
";
  }

  static const char* value(const  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lpId);
    stream.next(m.unused);
    stream.next(m.timeOnTraj);
    stream.next(m.time);
    stream.next(m.ic_a);
    stream.next(m.ic_v);
    stream.next(m.ic_x);
    stream.next(m.jerk);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SM_SEGMENT_STR_ROS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_soft_controller::SM_SEGMENT_STR_ROS_<ContainerAllocator> & v) 
  {
    s << indent << "lpId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lpId);
    s << indent << "unused: ";
    Printer<int32_t>::stream(s, indent + "  ", v.unused);
    s << indent << "timeOnTraj: ";
    Printer<double>::stream(s, indent + "  ", v.timeOnTraj);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "ic_a: ";
    Printer<double>::stream(s, indent + "  ", v.ic_a);
    s << indent << "ic_v: ";
    Printer<double>::stream(s, indent + "  ", v.ic_v);
    s << indent << "ic_x: ";
    Printer<double>::stream(s, indent + "  ", v.ic_x);
    s << indent << "jerk: ";
    Printer<double>::stream(s, indent + "  ", v.jerk);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_SOFT_CONTROLLER_MESSAGE_SM_SEGMENT_STR_ROS_H

